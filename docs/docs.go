// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/login_user": {
            "post": {
                "description": "Authenticates a user and returns a JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User login data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.LoginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/meal/{ID}": {
            "get": {
                "description": "Get details of a meal using its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meals"
                ],
                "summary": "Get a meal by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meal ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.GetMealResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/meals": {
            "get": {
                "description": "Returns a list of all meals.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meals"
                ],
                "summary": "Get all meals",
                "responses": {
                    "200": {
                        "description": "List of meals retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/register_user": {
            "post": {
                "description": "Registers a new user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.RegisterUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseMessage"
                        }
                    },
                    "409": {
                        "description": "User with this login already exists",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/schemas.ResponseMessage"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ds.Meals": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                },
                "meal_brand": {
                    "type": "string"
                },
                "meal_detail": {
                    "type": "string"
                },
                "meal_info": {
                    "type": "string"
                },
                "meal_weight": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "schemas.GetMealResponse": {
            "type": "object",
            "properties": {
                "meal": {
                    "$ref": "#/definitions/ds.Meals"
                }
            }
        },
        "schemas.LoginUserRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "schemas.RegisterUserRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "schemas.ResponseMessage": {
            "type": "object"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.1",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "DevIntApp",
	Description:      "This is API for Milk Kitchen requests",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
